// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int keyboard, bufferSize;
    /** Initializes the keyboard. */
    function void init() {
        let keyboard = 24576;
        let bufferSize = 40;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        var char c;
        let c = Memory.peek(keyboard);
        if((c > 0) & (c < 153))
        {
            return c;
        }
        else
        {
            return 0;
        }
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char c;
        do Output.printChar(0);

        let c = Keyboard.keyPressed();
        while (c = 0)
        {
            let c = Keyboard.keyPressed();
        }
        while (~(Keyboard.keyPressed() = 0))
        { }
        do Output.backSpace();
        do Output.printChar(c);
        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var char c;
        var String str, newStr;
        var int cnt, length;
        do Output.printString(message);
        let cnt = 0;
        let length = bufferSize;
        let str = String.new(length);
        while(true)
        {
            let c = Keyboard.readChar();
            if(c = String.newLine())
            {
                return str;
            }

            if(c = String.backSpace())
            {
                let cnt = cnt - 1;
                do str.eraseLastChar();
            }
            else
            {
                if(cnt < (length - 1))
                {
                    let str = str.appendChar(c);
                    let cnt = cnt + 1;
                }
                else
                {
                    let newStr = String.new(length + bufferSize);
                    let cnt = 0;
                    while(cnt < (length - 1))
                    {
                        let newStr = newStr.appendChar(str.charAt(cnt));
                        let cnt = cnt + 1;
                    }
                    do str.dispose();
                    let str = newStr;
                    let length = length + bufferSize;
                }
            }
        }
        return 0;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var char c;
        var String str;
        do Output.printString(message);
        let str = String.new(6);

        while(true)
        {
            let c = Keyboard.readChar();
            if(~((c = 45) | ((c > 47) & (c < 58)) | (c = String.backSpace())))
            {
                return str.intValue();
            }

            if(c = String.backSpace())
            {
                do str.eraseLastChar();
            }
            else
            {
                let str = str.appendChar(c);
            }
        }
        return 0;
    }
}
