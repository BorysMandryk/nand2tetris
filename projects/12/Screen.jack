// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array twoToThe;
    static Array screen;
    
    /** Initializes the Screen. */
    function void init() {
        var int j;
        let color = true;
        let twoToThe = Array.new(16);
        let j = 0;
        let twoToThe[0] = 1;
        while(j < 15)
        {
            let twoToThe[j + 1] = twoToThe[j] + twoToThe[j];
            let j = j + 1;
        } 
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int j;
        let j = 0;
        while (j < 8096)
        {
            do Memory.poke(16384 + j, 0);
            let j = j + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, value, mask;
        let addr = 16384 + (y * 32) + (x / 16);
        let value = Memory.peek(addr);
        let mask = twoToThe[x & 15];
        if(color)
        {
            let value = value | mask;
        }
        else 
        {
            let value = value & (~mask);
        }
        do Memory.poke(addr, value);
        return;
    }

    /** Draws a horizontal line from x1 to x2 at row y. */
    function void drawHorizontalLine(int x1, int x2, int y)
    {
        var int temp;
        if(x1 > x2)
        {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        while(~(x1 > x2))
        {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }

    /** Draws a vertical line from y1 to y2 at column x. */
    function void drawVerticalLine(int x, int y1, int y2)
    {
        var int temp;
        if(y1 > y2)
        {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        while(~(y1 > y2))
        {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2). */
    function void drawDiagonalLine(int x1, int y1, int x2, int y2)
    {
        var int dx, dy, a, b, temp, diff;
        if(x1 > x2)
        {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        if(y1 < y2)
        {
            while((~(a > dx)) & (~(b > dy)))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0)
                {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else
                {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        else
        {
            let dy = y1 - y2;
            while((~(a > dx)) & (~(b > dy)))
            {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (diff < 0)
                {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else
                {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
    }


    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if(y1 = y2)
        {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }
        if(x1 = x2)
        {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }
        
        do Screen.drawDiagonalLine(x1, y1, x2, y2);
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        while(~(y1 > y2))
        {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        let dy = -r;
        while(~(dy > r))
        {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
