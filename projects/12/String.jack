// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength < 0)
        {
            do Sys.error(14);
        }
        if(maxLength = 0)
        {
            let maxLength = 1;
        }
        let max = maxLength;
        let str = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j < length)
        {
            return str[j];
        }
        do Sys.error(15);
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j < length)
        {
            let str[j] = c;
            return;
        }
        do Sys.error(16);
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < max)
        {
            let str[length] = c;
            let length = length + 1;
        }
        else
        {
            do Sys.error(17);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length > 0)
        {
            let length = length - 1;
        }
        else
        {
            do Sys.error(18);
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {     
        var int val, d, i;      
        let val = 0;
        if(str[0] = 45)
        {
            let i = 1; 
        }
        else 
        {
            let i = 0;
        }

        while((i < length))
        {
            let d = str[i];
            if(~((d > 47) & (d < 58)))      
            {
                return val;
            }

            let val = (val * 10) + (d - 48);
            let i = i + 1;
        }
        if(str[0] = 45)
        {
            return -val;
        }
        return val;
    }

    method void int2String(int val){
        var int lastDigit;
        var int c;
        if(~(length < max))
        {
            do Sys.error(19);
        }
        let lastDigit = val - ((val / 10) * 10);
        let c = 48 + lastDigit;
        if(val < 10)
        {
            do appendChar(c);
        }
        else
        {
            do int2String(val / 10);
            do appendChar(c);
        }
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        
        if(val < 0)
        {
            do appendChar(45);
            let val = -val;
        }
        do int2String(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
